name: publish
on:
  push:
    tags:
      - 'v*'
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v3.0.3
        with:
          path: |
            ~/.gradle/caches/
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle.properties', 'gradle/**') }}
          restore-keys: -${{ runner.os }}-gradle-
      - name: Gradle assemble
        run: ./gradlew assemble
        env:
          ORG_GRADLE_PROJECT_githubActor: ${{ env.GITHUB_ACTOR }}
          ORG_GRADLE_PROJECT_githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish artifacts
        run: ./gradlew publishStubsPublicationToGithub_packagesRepository
        env:
          ORG_GRADLE_PROJECT_githubActor: ${{ env.GITHUB_ACTOR }}
          ORG_GRADLE_PROJECT_githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Configures gcloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: equidis
          service_account_key: ${{ secrets.GCP_GCR_SECRET }}
          export_default_credentials: true
      - name: Publish Docker image
        run: |
          gcloud info
          gcloud auth configure-docker
          ./gradlew jib
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Upload deployment metadata
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: deployment-metadata.zip
          asset_path: build/libs/deployment-metadata.zip
          asset_content_type: application/zip
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GH_DISPATCH_TOKEN }}
          repository: equidis/cluster-config
          event-type: new-release
          client-payload: '{"tag": "${{ steps.get_version.outputs.VERSION }}", "repo": "${{ github.repository }}"}'
